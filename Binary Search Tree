#include <iostream>
#include <queue>
using namespace std;

struct Node {
    int data;
    Node* left;
    Node* right;

    Node(int val) : data(val), left(nullptr), right(nullptr) {}
};

class BST {
public:
    Node* insert(Node* root, int key) {
        if (!root) return new Node(key);
        if (key < root->data)
            root->left = insert(root->left, key);
        else if (key > root->data)
            root->right = insert(root->right, key);
        return root; // Duplicate entries ignored
    }

    Node* deleteNode(Node* root, int key) {
        if (!root) return root;
        if (key < root->data)
            root->left = deleteNode(root->left, key);
        else if (key > root->data)
            root->right = deleteNode(root->right, key);
        else {
            if (!root->left) {
                Node* temp = root->right;
                delete root;
                return temp;
            } else if (!root->right) {
                Node* temp = root->left;
                delete root;
                return temp;
            }
            Node* temp = minValueNode(root->right);
            root->data = temp->data;
            root->right = deleteNode(root->right, temp->data);
        }
        return root;
    }

    Node* search(Node* root, int key) {
        if (!root || root->data == key)
            return root;
        if (key < root->data)
            return search(root->left, key);
        return search(root->right, key);
    }

    void inorder(Node* root) {
        if (root) {
            inorder(root->left);
            cout << root->data << " ";
            inorder(root->right);
        }
    }

    int depth(Node* root) {
        if (!root) return 0;
        return 1 + max(depth(root->left), depth(root->right));
    }

    Node* mirror(Node* root) {
        if (!root) return nullptr;
        Node* mirrored = new Node(root->data);
        mirrored->left = mirror(root->right);
        mirrored->right = mirror(root->left);
        return mirrored;
    }

    Node* copy(Node* root) {
        if (!root) return nullptr;
        Node* copied = new Node(root->data);
        copied->left = copy(root->left);
        copied->right = copy(root->right);
        return copied;
    }

    void displayParentsWithChildren(Node* root) {
        if (root) {
            cout << "Parent: " << root->data << " -> ";
            if (root->left) cout << "Left Child: " << root->left->data << " ";
            if (root->right) cout << "Right Child: " << root->right->data << " ";
            cout << endl;
            displayParentsWithChildren(root->left);
            displayParentsWithChildren(root->right);
        }
    }

    void displayLeaves(Node* root) {
        if (root) {
            if (!root->left && !root->right)
                cout << root->data << " ";
            displayLeaves(root->left);
            displayLeaves(root->right);
        }
    }

    void displayLevelWise(Node* root) {
        if (!root) return;
        queue<Node*> q;
        q.push(root);
        while (!q.empty()) {
            Node* current = q.front(); q.pop();
            cout << current->data << " ";
            if (current->left) q.push(current->left);
            if (current->right) q.push(current->right);
        }
    }

private:
    Node* minValueNode(Node* node) {
        Node* current = node;
        while (current && current->left) 
            current = current->left;
        return current;
    }
};

int main() {
    BST bst;
    Node* root = nullptr;

    root = bst.insert(root, 50);
    bst.insert(root, 30);
    bst.insert(root, 70);
    bst.insert(root, 20);
    bst.insert(root, 40);
    bst.insert(root, 60);
    bst.insert(root, 80);

    cout << "Inorder Traversal: ";
    bst.inorder(root); cout << endl;

    root = bst.deleteNode(root, 20);
    cout << "After Deletion (20), Inorder: ";
    bst.inorder(root); cout << endl;

    Node* searchResult = bst.search(root, 70);
    cout << "Search for 70: " << (searchResult ? "Found" : "Not Found") << endl;

    cout << "Depth of Tree: " << bst.depth(root) << endl;

    Node* mirrored = bst.mirror(root);
    cout << "Mirror Inorder: ";
    bst.inorder(mirrored); cout << endl;

    Node* copied = bst.copy(root);
    cout << "Copied Tree Inorder: ";
    bst.inorder(copied); cout << endl;

    cout << "Parents with Children: \n";
    bst.displayParentsWithChildren(root);

    cout << "Leaf Nodes: ";
    bst.displayLeaves(root); cout << endl;

    cout << "Level-wise Display: ";
    bst.displayLevelWise(root); cout << endl;

    return 0;
}
