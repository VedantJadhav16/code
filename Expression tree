#include <iostream>
#include <stack>
#include <cstring>
using namespace std;

struct Node {
    char data;
    Node* left;
    Node* right;

    Node(char val) : data(val), left(nullptr), right(nullptr) {}
};

class ExpressionTree {
public:
    Node* constructFromPostfix(string postfix) {
        stack<Node*> stk;
        for (char ch : postfix) {
            Node* newNode = new Node(ch);
            if (isalnum(ch))
                stk.push(newNode);
            else {
                newNode->right = stk.top(); stk.pop();
                newNode->left = stk.top(); stk.pop();
                stk.push(newNode);
            }
        }
        return stk.top();
    }

    Node* constructFromPrefix(string prefix) {
        stack<Node*> stk;
        for (int i = prefix.length() - 1; i >= 0; --i) {
            Node* newNode = new Node(prefix[i]);
            if (isalnum(prefix[i]))
                stk.push(newNode);
            else {
                newNode->left = stk.top(); stk.pop();
                newNode->right = stk.top(); stk.pop();
                stk.push(newNode);
            }
        }
        return stk.top();
    }

    void inorder(Node* root) {
        if (!root) return;
        inorder(root->left);
        cout << root->data << " ";
        inorder(root->right);
    }

    void preorder(Node* root) {
        if (!root) return;
        cout << root->data << " ";
        preorder(root->left);
        preorder(root->right);
    }

    void postorder(Node* root) {
        if (!root) return;
        postorder(root->left);
        postorder(root->right);
        cout << root->data << " ";
    }

    void inorderNonRecursive(Node* root) {
        stack<Node*> stk;
        Node* curr = root;
        while (curr || !stk.empty()) {
            while (curr) {
                stk.push(curr);
                curr = curr->left;
            }
            curr = stk.top(); stk.pop();
            cout << curr->data << " ";
            curr = curr->right;
        }
    }

    void preorderNonRecursive(Node* root) {
        if (!root) return;
        stack<Node*> stk;
        stk.push(root);
        while (!stk.empty()) {
            Node* curr = stk.top(); stk.pop();
            cout << curr->data << " ";
            if (curr->right) stk.push(curr->right);
            if (curr->left) stk.push(curr->left);
        }
    }

    void postorderNonRecursive(Node* root) {
        if (!root) return;
        stack<Node*> stk1, stk2;
        stk1.push(root);
        while (!stk1.empty()) {
            Node* curr = stk1.top(); stk1.pop();
            stk2.push(curr);
            if (curr->left) stk1.push(curr->left);
            if (curr->right) stk1.push(curr->right);
        }
        while (!stk2.empty()) {
            cout << stk2.top()->data << " ";
            stk2.pop();
        }
    }
};

int main() {
    ExpressionTree et;
    string postfix = "ab+c*";
    string prefix = "*+abc";

    Node* rootFromPostfix = et.constructFromPostfix(postfix);
    Node* rootFromPrefix = et.constructFromPrefix(prefix);

    cout << "Recursive Inorder: "; et.inorder(rootFromPostfix); cout << endl;
    cout << "Recursive Preorder: "; et.preorder(rootFromPostfix); cout << endl;
    cout << "Recursive Postorder: "; et.postorder(rootFromPostfix); cout << endl;

    cout << "Non-Recursive Inorder: "; et.inorderNonRecursive(rootFromPostfix); cout << endl;
    cout << "Non-Recursive Preorder: "; et.preorderNonRecursive(rootFromPostfix); cout << endl;
    cout << "Non-Recursive Postorder: "; et.postorderNonRecursive(rootFromPostfix); cout << endl;

    return 0;
}
